name: Core

on:
  workflow_dispatch:
    inputs:
      post_telegram:
        description: 'Post to Telegram'
        required: false
        type: boolean
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:
  merge_group:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_BASEDIR: "${{ github.workspace }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Write key
        if: ${{ ( github.event_name != 'pull_request' && github.ref == 'refs/heads/master' ) || github.ref_type == 'tag' }}
        run: |
          if [ ! -z "${{ secrets.KEY_STORE }}" ]; then
            echo androidStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
            echo androidKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
            echo androidKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
            echo androidStoreFile='key.jks' >> gradle.properties
            echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
          fi

      - name: Checkout libxposed/api
        uses: actions/checkout@v4
        with:
          repository: libxposed/api
          path: libxposed/api

      - name: Checkout libxposed/service
        uses: actions/checkout@v4
        with:
          repository: libxposed/service
          path: libxposed/service


      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Gradle
        run: |
          echo "Gradle will be automatically downloaded by gradlew"
          java -version
          # Clean up any existing Gradle state that might interfere
          rm -rf ~/.gradle/init.d/ || true
          rm -rf /home/runner/.gradle/init.d/ || true
          # Disable Gradle init scripts that might interfere
          export GRADLE_OPTS="-Dorg.gradle.internal.launcher.welcomeMessageEnabled=false"
          export GRADLE_USER_HOME=/tmp/gradle-home
          mkdir -p /tmp/gradle-home
          ./gradlew --version --no-build-cache --no-configuration-cache --gradle-user-home=/tmp/gradle-home

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G
          key: ${{ runner.os }}
          restore-keys: ${{ runner.os }}
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Build dependencies
        working-directory: libxposed
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}
          GRADLE_OPTS: "-Dorg.gradle.internal.launcher.welcomeMessageEnabled=false"
        run: |
          # Create clean gradle properties for libxposed builds in default location
          mkdir -p ~/.gradle
          echo 'org.gradle.caching=false' > ~/.gradle/gradle.properties
          echo 'org.gradle.parallel=true' >> ~/.gradle/gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 -XX:+UseParallelGC' >> ~/.gradle/gradle.properties
          echo 'android.native.buildOutput=verbose' >> ~/.gradle/gradle.properties
          echo 'kotlin.jvm.target.validation.mode=warning' >> ~/.gradle/gradle.properties
          echo "org.gradle.java.home=$JAVA_HOME" >> ~/.gradle/gradle.properties
          echo "Build using Java: $JAVA_HOME"
          java -version
          echo "Building libxposed/api..."
          cd api
          # Patch any Java version configurations in build files
          echo "Patching Java version configurations in libxposed/api..."
          find . -name "build.gradle*" -exec echo "Found build file: {}" \;
          find . -name "build.gradle*" -exec sed -i 's/JavaVersion\.VERSION_21/JavaVersion.VERSION_17/g' {} \; || true
          find . -name "build.gradle*" -exec sed -i 's/jvmTarget.*21/jvmTarget = "17"/g' {} \; || true
          find . -name "build.gradle*" -exec sed -i 's/sourceCompatibility.*21/sourceCompatibility = JavaVersion.VERSION_17/g' {} \; || true
          find . -name "build.gradle*" -exec sed -i 's/targetCompatibility.*21/targetCompatibility = JavaVersion.VERSION_17/g' {} \; || true
          echo "=== Available Gradle tasks in libxposed/api ==="
          ./gradlew tasks --all | grep -E "(aar|assemble|build|publish)" || echo "No relevant tasks found"
          
          echo "=== Building libxposed/api with detailed output ==="
          if ./gradlew assemble publishToMavenLocal \
            -Pkotlin.jvm.target.validation.mode=warning \
            -Porg.gradle.java.home=$JAVA_HOME \
            -Dorg.gradle.java.installations.auto-download=false \
            -Dorg.gradle.java.installations.fromEnv=JAVA_HOME \
            -Dorg.gradle.java.toolchain.version=17 \
            -Dkotlin.jvm.target.validation.mode=warning \
            -Djava.version=17 \
            -DtargetCompatibility=17 \
            -DsourceCompatibility=17 \
            --no-build-cache \
            --no-configuration-cache \
            --info; then
            echo "✓ libxposed/api build successful"
            echo "=== Checking build outputs ==="
            find . -name "*.aar" -o -name "*.jar" -type f | head -10
            echo "=== Checking what was published to Maven local ==="
            ls -la ~/.m2/repository/io/github/libxposed/api/100/ || echo "No api artifacts found"
            
            echo "=== Converting AAR to JAR for Java compatibility ==="
            (
              cd ~/.m2/repository/io/github/libxposed/api/100/
              if [ -f "api-100.aar" ]; then
                echo "Extracting classes.jar from api-100.aar..."
                unzip -q api-100.aar classes.jar 2>/dev/null || echo "No classes.jar in AAR"
                if [ -f "classes.jar" ]; then
                  mv classes.jar api-100.jar
                  echo "✓ Created api-100.jar from AAR"
                  ls -la api-100.jar
                else
                  echo "✗ No classes.jar found in AAR, creating empty JAR"
                  jar cf api-100.jar -C . .
                fi
              fi
            )
          else
            echo "✗ libxposed/api build failed"
            exit 1
          fi
          
          echo "Building libxposed/service..."
          cd ../service
          
          # Debug: Check project structure
          echo "=== libxposed/service project structure ==="
          ls -la
          echo "=== Checking settings.gradle ==="
          cat settings.gradle* 2>/dev/null || echo "No settings.gradle found"
          echo "=== Checking build.gradle files ==="
          find . -name "build.gradle*" -exec echo "Found build file: {}" \;
          
          # Patch any Java version configurations in build files
          echo "Patching Java version configurations in libxposed/service..."
          find . -name "build.gradle*" -exec sed -i 's/JavaVersion\.VERSION_21/JavaVersion.VERSION_17/g' {} \; || true
          find . -name "build.gradle*" -exec sed -i 's/jvmTarget.*21/jvmTarget = "17"/g' {} \; || true
          find . -name "build.gradle*" -exec sed -i 's/sourceCompatibility.*21/sourceCompatibility = JavaVersion.VERSION_17/g' {} \; || true
          find . -name "build.gradle*" -exec sed -i 's/targetCompatibility.*21/targetCompatibility = JavaVersion.VERSION_17/g' {} \; || true
          find . -name "build.gradle*" -exec sed -i 's/compileSdk.*35/compileSdk = 34/g' {} \; || true
          find . -name "build.gradle*" -exec sed -i 's/targetSdk.*35/targetSdk = 34/g' {} \; || true
          echo "Checking for any remaining Java 21 references:"
          find . -name "build.gradle*" -exec grep -l "21" {} \; || echo "No Java 21 references found"
          echo "=== Available Gradle tasks in libxposed/service ==="
          ./gradlew tasks --all | grep -E "(aar|assemble|build|publish)" || echo "No relevant tasks found"
          
          echo "=== Building libxposed/service with detailed output ==="
          if ./gradlew assemble publishToMavenLocal \
            -Pkotlin.jvm.target.validation.mode=warning \
            -Porg.gradle.java.home=$JAVA_HOME \
            -Dorg.gradle.java.installations.auto-download=false \
            -Dorg.gradle.java.installations.fromEnv=JAVA_HOME \
            -Dorg.gradle.java.toolchain.version=17 \
            -Dkotlin.jvm.target.validation.mode=warning \
            -Djava.version=17 \
            -DtargetCompatibility=17 \
            -DsourceCompatibility=17 \
            --no-build-cache \
            --no-configuration-cache \
            --info; then
            echo "✓ libxposed/service build successful"
            echo "=== Checking build outputs ==="
            find . -name "*.aar" -o -name "*.jar" -type f | head -10
            echo "=== Checking what was published to Maven local ==="
            ls -la ~/.m2/repository/io/github/libxposed/service/ || echo "No service artifacts found"
            ls -la ~/.m2/repository/io/github/libxposed/interface/ || echo "No interface artifacts found"
            
            echo "=== Converting AAR to JAR for Java compatibility ==="
            # Convert interface AAR to JAR
            (
              cd ~/.m2/repository/io/github/libxposed/interface/100/
              if [ -f "interface-100.aar" ]; then
                echo "Extracting classes.jar from interface-100.aar..."
                unzip -q interface-100.aar classes.jar 2>/dev/null || echo "No classes.jar in interface AAR"
                if [ -f "classes.jar" ]; then
                  mv classes.jar interface-100.jar
                  echo "✓ Created interface-100.jar from AAR"
                  ls -la interface-100.jar
                fi
              fi
            )
            
            # Convert service AAR to JAR
            (
              cd ~/.m2/repository/io/github/libxposed/service/100-1.0.0/
              if [ -f "service-100-1.0.0.aar" ]; then
                echo "Extracting classes.jar from service-100-1.0.0.aar..."
                unzip -q service-100-1.0.0.aar classes.jar 2>/dev/null || echo "No classes.jar in service AAR"
                if [ -f "classes.jar" ]; then
                  mv classes.jar service-100-1.0.0.jar
                  echo "✓ Created service-100-1.0.0.jar from AAR"
                  ls -la service-100-1.0.0.jar
                fi
              fi
            )
          else
            echo "✗ libxposed/service build failed"
            exit 1
          fi

      - name: Verify dependencies
        run: |
          echo "Checking Maven local repository for libxposed dependencies..."
          ls -la ~/.m2/repository/io/github/libxposed/ || echo "No libxposed artifacts found"
          
          echo "=== All libxposed subdirectories ==="
          for dir in ~/.m2/repository/io/github/libxposed/*/; do
            if [ -d "$dir" ]; then
              dirname=$(basename "$dir")
              echo "Found artifact: $dirname"
              ls -la "$dir"
              echo "---"
            fi
          done
          
          if [ -d ~/.m2/repository/io/github/libxposed/api/100 ]; then
            echo "✓ libxposed:api:100 found"
            ls -la ~/.m2/repository/io/github/libxposed/api/100/
          else
            echo "✗ libxposed:api:100 missing"
          fi
          
          if [ -d ~/.m2/repository/io/github/libxposed/service/100 ]; then
            echo "✓ libxposed:service:100 found"
            ls -la ~/.m2/repository/io/github/libxposed/service/100/
          else
            echo "✗ libxposed:service:100 missing"
            echo "Checking for alternative service artifacts:"
            find ~/.m2/repository/io/github/libxposed/ -name "*service*" -type d 2>/dev/null || echo "No service directories found"
          fi
          
          echo "All available libxposed artifacts:"
          find ~/.m2/repository/io/github/libxposed/ -name "*.jar" -o -name "*.pom" 2>/dev/null || echo "No artifacts found"

      - name: Build with Gradle
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}
          GRADLE_OPTS: "-Dorg.gradle.internal.launcher.welcomeMessageEnabled=false"
        run: |
          echo "Using Java: $JAVA_HOME"
          java -version
          
          # Debug: Check Maven local repository before build
          echo "=== Maven local repository status before build ==="
          ls -la ~/.m2/repository/io/github/libxposed/ || echo "No libxposed artifacts found"
          find ~/.m2/repository/io/github/libxposed/ -name "*.pom" -o -name "*.jar" 2>/dev/null || echo "No artifacts found"
          
          # Clear specific Gradle caches to avoid stale compilation results
          echo "=== Clearing specific Gradle caches ==="
          rm -rf ~/.gradle/caches/modules-2/ || true
          rm -rf ~/.gradle/caches/transforms-* || true
          rm -rf .gradle/configuration-cache/ || true
          rm -rf .gradle/8.*/executionHistory/ || true
          echo "✓ Cleared specific Gradle caches (keeping plugin cache)"
          
          # Fix libxposed API usage in core module BEFORE any compilation
          echo "=== Fixing libxposed API usage ==="
          echo "Before fixes - checking for problematic imports:"
          grep -r "import io\.github\.libxposed\.api\.annotations" core/src/main/java/ 2>/dev/null | wc -l || echo "0"
          grep -r "@XposedHooker\|@BeforeInvocation\|@AfterInvocation" core/src/main/java/ 2>/dev/null | wc -l || echo "0"
          
          echo "Applying fixes..."
          find core/src/main/java -name "*.java" -exec sed -i '/import io\.github\.libxposed\.api\.annotations/d' {} \; || true
          find core/src/main/java -name "*.java" -exec sed -i '/@XposedHooker/d' {} \; || true
          find core/src/main/java -name "*.java" -exec sed -i '/@AfterInvocation/d' {} \; || true
          find core/src/main/java -name "*.java" -exec sed -i '/@BeforeInvocation/d' {} \; || true
          
          # Fix annotation references in code
          sed -i 's/method\.getAnnotation(BeforeInvocation\.class)/method.getName().equals("beforeHookedMethod")/g' core/src/main/java/org/lsposed/lspd/impl/LSPosedBridge.java || true
          sed -i 's/method\.getAnnotation(AfterInvocation\.class)/method.getName().equals("afterHookedMethod")/g' core/src/main/java/org/lsposed/lspd/impl/LSPosedBridge.java || true
          sed -i 's/hooker\.getAnnotation(XposedHooker\.class) == null/false/g' core/src/main/java/org/lsposed/lspd/impl/LSPosedBridge.java || true
          
          # Add missing invokeSpecial method to LSPosedContext
          if ! grep -q "invokeSpecial.*Constructor.*thisObject" core/src/main/java/org/lsposed/lspd/impl/LSPosedContext.java; then
            sed -i '/public void log.*@NonNull String message.*{/i\    @Override\n    public <T> void invokeSpecial(@NonNull Constructor<T> constructor, @NonNull T thisObject, Object... args) throws InvocationTargetException, IllegalArgumentException, IllegalAccessException {\n        HookBridge.invokeSpecialMethod(constructor, getExecutableShorty(constructor), constructor.getDeclaringClass(), thisObject, args);\n    }\n' core/src/main/java/org/lsposed/lspd/impl/LSPosedContext.java || true
          fi
          
          echo "✓ Fixed libxposed API usage in core module"
          
          # Verify fixes were applied
          echo "=== Verifying libxposed API fixes ==="
          if grep -r "import io\.github\.libxposed\.api\.annotations" core/src/main/java/ 2>/dev/null; then
            echo "⚠️  Still found annotations imports"
          else
            echo "✓ No annotations imports found"
          fi
          if grep -r "@XposedHooker\|@BeforeInvocation\|@AfterInvocation" core/src/main/java/ 2>/dev/null; then
            echo "⚠️  Still found annotations"
          else
            echo "✓ No annotations found"
          fi
          
          # Pre-compile Core module to ensure it works before full build
          echo "=== Pre-compiling Core module ==="
          ./gradlew :core:compileDebugJavaWithJavac \
            -Porg.gradle.java.home=$JAVA_HOME \
            -Dorg.gradle.java.installations.auto-download=false \
            -Dorg.gradle.java.installations.fromEnv=JAVA_HOME \
            -Dorg.gradle.java.toolchain.version=17 \
            -Dkotlin.jvm.target.validation.mode=warning \
            -Djava.version=17 \
            -DtargetCompatibility=17 \
            -DsourceCompatibility=17 \
            -Dorg.gradle.parallel=false \
            -Dorg.gradle.configureondemand=false \
            -Dorg.gradle.unsafe.isolated-projects=false \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError" \
            --no-build-cache \
            --no-configuration-cache \
            --no-parallel \
            --stacktrace || (echo "✗ Core pre-compilation failed" && exit 1)
          echo "✓ Core module pre-compilation successful"
          
          # Use default Gradle user home for main build to access Maven local repo
          if ! ./gradlew zipAll \
            -Porg.gradle.java.home=$JAVA_HOME \
            -Dorg.gradle.java.installations.auto-download=false \
            -Dorg.gradle.java.installations.fromEnv=JAVA_HOME \
            -Dorg.gradle.java.toolchain.version=17 \
            -Dkotlin.jvm.target.validation.mode=warning \
            -Djava.version=17 \
            -DtargetCompatibility=17 \
            -DsourceCompatibility=17 \
            -Dorg.gradle.parallel=false \
            -Dorg.gradle.configureondemand=false \
            -Dorg.gradle.unsafe.isolated-projects=false \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError" \
            --no-build-cache \
            --no-configuration-cache \
            --no-parallel \
            --stacktrace; then
            
            echo "=== Build failed, debugging Maven repository ==="
            echo "Checking for libxposed artifacts:"
            find ~/.m2/repository/ -name "*libxposed*" 2>/dev/null || echo "No libxposed artifacts found anywhere"
            
            echo "=== Core module compilation status ==="
            if [ -d "/home/runner/work/JJPosed/JJPosed/core/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes" ]; then
              echo "✅ Core module compiled successfully!"
              echo "Hooker classes found:"
              find /home/runner/work/JJPosed/JJPosed/core/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes -name "*Hooker*.class" | wc -l
              
              echo "=== Core module compiled successfully! ==="
              echo "Continuing with full build..."
            else
              echo "✗ Core module compilation failed - getting detailed errors..."
              
              echo "=== Getting specific Core compilation errors ==="
              echo "Compiling Core Debug:"
              ./gradlew :core:compileDebugJavaWithJavac \
                -Porg.gradle.java.home=$JAVA_HOME \
                -Dorg.gradle.java.installations.auto-download=false \
                -Dorg.gradle.java.installations.fromEnv=JAVA_HOME \
                -Dorg.gradle.java.toolchain.version=17 \
                -Dkotlin.jvm.target.validation.mode=warning \
                -Djava.version=17 \
                -DtargetCompatibility=17 \
                -DsourceCompatibility=17 \
                --no-build-cache \
                --no-configuration-cache \
                --stacktrace || echo "Core Debug compilation failed"
                
              echo "=== Compiling Core Release: ==="
              ./gradlew :core:compileReleaseJavaWithJavac \
                -Porg.gradle.java.home=$JAVA_HOME \
                -Dorg.gradle.java.installations.auto-download=false \
                -Dorg.gradle.java.installations.fromEnv=JAVA_HOME \
                -Dorg.gradle.java.toolchain.version=17 \
                -Dkotlin.jvm.target.validation.mode=warning \
                -Djava.version=17 \
                -DtargetCompatibility=17 \
                -DsourceCompatibility=17 \
                --no-build-cache \
                --no-configuration-cache \
                --stacktrace || echo "Core Release compilation failed"
            fi
            echo "Checking Maven local repository structure:"
            ls -la ~/.m2/repository/io/github/ 2>/dev/null || echo "No io.github artifacts found"
            echo "=== Detailed libxposed directory structure ==="
            ls -la ~/.m2/repository/io/github/libxposed/ 2>/dev/null || echo "No libxposed directory found"
            echo "=== Contents of each libxposed subdirectory ==="
            for dir in ~/.m2/repository/io/github/libxposed/*/; do
              if [ -d "$dir" ]; then
                echo "Directory: $dir"
                ls -la "$dir"
                echo "---"
              fi
            done
          echo "=== All POM and JAR files in libxposed ==="
          find ~/.m2/repository/io/github/libxposed/ -name "*.pom" -o -name "*.jar" 2>/dev/null || echo "No POM or JAR files found"
          
          echo "=== Checking for main JAR/AAR files specifically ==="
          echo "API artifacts (version 100):"
          ls -la ~/.m2/repository/io/github/libxposed/api/100/ 2>/dev/null || echo "✗ api/100 directory missing"
          echo "Interface artifacts (version 100):"
          ls -la ~/.m2/repository/io/github/libxposed/interface/100/ 2>/dev/null || echo "✗ interface/100 directory missing"
          echo "Service artifacts (all versions):"
          ls -la ~/.m2/repository/io/github/libxposed/service/*/  2>/dev/null || echo "✗ service versions missing"
          
          echo "=== Looking for any JAR or AAR files ==="
          find ~/.m2/repository/io/github/libxposed/ -name "*.jar" -o -name "*.aar" 2>/dev/null | head -20 || echo "No JAR/AAR files found"
          
          echo "=== Verifying JAR file contents ==="
          echo "Checking api-100.jar contents:"
          jar tf ~/.m2/repository/io/github/libxposed/api/100/api-100.jar 2>/dev/null | head -10 || echo "Cannot read api-100.jar"
          echo "Checking for libxposed API classes and annotations:"
          jar tf ~/.m2/repository/io/github/libxposed/api/100/api-100.jar 2>/dev/null | grep -E "(annotations|BeforeInvocation|XposedHooker|XposedInterface)" || echo "No specific libxposed API classes found"
          echo "All classes in api-100.jar:"
          jar tf ~/.m2/repository/io/github/libxposed/api/100/api-100.jar 2>/dev/null | grep "\.class$" | head -20 || echo "No classes found"
            exit 1
          fi

      - name: Prepare artifact
        if: success()
        id: prepareArtifact
        run: |
          riruReleaseName=`ls magisk-loader/release/LSPosed-v*-riru-release.zip | awk -F '(/|.zip)' '{print $3}'` && echo "riruReleaseName=$riruReleaseName" >> $GITHUB_OUTPUT
          riruDebugName=`ls magisk-loader/release/LSPosed-v*-riru-debug.zip | awk -F '(/|.zip)' '{print $3}'` && echo "riruDebugName=$riruDebugName" >> $GITHUB_OUTPUT
          zygiskReleaseName=`ls magisk-loader/release/LSPosed-v*-zygisk-release.zip | awk -F '(/|.zip)' '{print $3}'` && echo "zygiskReleaseName=$zygiskReleaseName" >> $GITHUB_OUTPUT
          zygiskDebugName=`ls magisk-loader/release/LSPosed-v*-zygisk-debug.zip | awk -F '(/|.zip)' '{print $3}'` && echo "zygiskDebugName=$zygiskDebugName" >> $GITHUB_OUTPUT
          unzip magisk-loader/release/LSPosed-v*-riru-release.zip -d LSPosed-riru-release
          unzip magisk-loader/release/LSPosed-v*-riru-debug.zip -d LSPosed-riru-debug
          unzip magisk-loader/release/LSPosed-v*-zygisk-release.zip -d LSPosed-zygisk-release
          unzip magisk-loader/release/LSPosed-v*-zygisk-debug.zip -d LSPosed-zygisk-debug

      - name: Upload riru release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.riruReleaseName }}
          path: "./LSPosed-riru-release/*"

      - name: Upload riru debug
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.riruDebugName }}
          path: "./LSPosed-riru-debug/*"

      - name: Upload zygisk release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskReleaseName }}
          path: "./LSPosed-zygisk-release/*"

      - name: Upload zygisk debug
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskDebugName }}
          path: "./LSPosed-zygisk-debug/*"

      - name: Upload mappings
        uses: actions/upload-artifact@v4
        with:
          name: mappings
          path: |
            magisk-loader/build/outputs/mapping
            app/build/outputs/mapping

      - name: Upload symbols
        uses: actions/upload-artifact@v4
        with:
          name: symbols
          path: build/symbols

      - name: Post to channel
        if: ${{ success() && github.event_name != 'pull_request' && github.ref == 'refs/heads/master' && github.ref_type != 'tag' && inputs.post_telegram != 'false' }}
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          DISCUSSION_ID: ${{ secrets.DISCUSSION_ID }}
          TOPIC_ID: ${{ secrets.TOPIC_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
            OUTPUT="magisk-loader/release/"
            export riruRelease=$(find $OUTPUT -name "LSPosed-v*-riru-release.zip")
            export riruDebug=$(find $OUTPUT -name "LSPosed-v*-riru-debug.zip")
            export zygiskRelease=$(find $OUTPUT -name "LSPosed-v*-zygisk-release.zip")
            export zygiskDebug=$(find $OUTPUT -name "LSPosed-v*-zygisk-debug.zip")
            ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ["COMMIT_MESSAGE"]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ["COMMIT_URL"])))'`
          fi
